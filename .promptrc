#!/bin/bash

# Put together PS1 generation
__prompt_command() {
    PS1=""

    local RCol='\[\e[0m\]'
    local Gre='\[\e[32m\]'
    local Red='\[\e[31m\]'
    local BYel='\[\e[1;33m\]'
    local BCya='\[\e[1;96m\]'
    local BBlue='\[\e[1;34m\]'
    local BPur='\[\e[1;95m\]'

    # Prompt prefix
    PS1="${RCol}\n┌─[\`if [ \$? = 0 ]; then echo ${Gre}✔${RCol}; else echo ${Red}✘${RCol}; fi\`]───[${BYel}\u${RCol}]──$(set_virtualenv)──[${BCya}\W${RCol}]$(parse_git_branch)\n└───▶${RCol} "

}

# Get current branch in git repo
function parse_git_branch() {
    BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	if [ ! "${BRANCH}" == "" ]
	then
        STAT=$(parse_git_dirty)
		echo "───[${BYel}${BRANCH}${BPur}${STAT}${RCol}]"
	else
		echo ""
	fi
}
# Get current status of git repo
function parse_git_dirty {
    #git fetch origin &>/dev/null & #cool but maybe too much
    status=$(git status 2>&1 | tee)
    dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
    untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
    ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
    newfile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
    renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
    deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
    behind=$(echo -n "${status}" 2> /dev/null | grep "behind" &> /dev/null; echo "$?")
    bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
    fi
    if [ "${behind}" == "0" ]; then
        bits="@${bits}"
    fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}
# Set something on the prompt if in venv
function set_virtualenv {
  if [ -z "$VIRTUAL_ENV" ]; then
      echo ""
  else
      VENV=$(echo "$VIRTUAL_ENV" | rev | cut -d'/' -f 1 | rev)
      echo "[${BBlue}${VENV}${RCol}]"
  fi
}
# Set a custom title to the current window
function set_win_title(){
    echo -ne "\033]0; Matteo's Terminal Emulator \007"
}
# Setup tmux config but only if not in tmux, attach old sessions
function setup_tmux(){
    if [[ -z "$TMUX" ]] ;then
        ID="$( tmux ls | grep -vm1 attached | cut -d: -f1 )" # get the id of a deattached session
        if [[ -z "$ID" ]] ;then # if not available create a new one
            exec tmux new-session
        else
            exec tmux attach-session -t "$ID" # if available attach to it
        fi
    fi
}
# Set windows title to something
function set_win_title(){
    echo -ne "\033]0; Matteo's Terminal Emulator \007"
}



# TMUX setup
setup_tmux

# Starship source
starship_precmd_user_func="set_win_title"
eval "$(starship init bash)"

# Now using starship
#PROMPT_COMMAND=__prompt_command # Func to gen PS1 after CMDs
